version: '3.8'

services:
  # SQL Server for development
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: pubs-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
    networks:
      - pubs-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: pubs-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - pubs-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # RabbitMQ for message broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: pubs-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - pubs-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pubs-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - pubs-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pubs-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deploy/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    networks:
      - pubs-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: pubs-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - pubs-network
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:14269/ || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5

  # API Gateway
  apigateway:
    build:
      context: .
      dockerfile: src/ApiGateways/ApiGateway/Dockerfile
    container_name: pubs-apigateway
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=PubsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
    networks:
      - pubs-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Authors Service
  authors-api:
    build:
      context: .
      dockerfile: src/Services/Authors/Authors.API/Dockerfile
    container_name: pubs-authors-api
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=PubsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
      - ConnectionStrings__Redis=redis:6379
      - MessageBroker__Host=rabbitmq
      - MessageBroker__Username=guest
      - MessageBroker__Password=guest
    networks:
      - pubs-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Publishers Service
  publishers-api:
    build:
      context: .
      dockerfile: src/Services/Publishers/Publishers.API/Dockerfile
    container_name: pubs-publishers-api
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=PubsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
      - ConnectionStrings__Redis=redis:6379
      - MessageBroker__Host=rabbitmq
      - MessageBroker__Username=guest
      - MessageBroker__Password=guest
    networks:
      - pubs-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Titles Service
  titles-api:
    build:
      context: .
      dockerfile: src/Services/Titles/Titles.API/Dockerfile
    container_name: pubs-titles-api
    ports:
      - "5003:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=PubsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
      - ConnectionStrings__Redis=redis:6379
      - MessageBroker__Host=rabbitmq
      - MessageBroker__Username=guest
      - MessageBroker__Password=guest
    networks:
      - pubs-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Sales Service
  sales-api:
    build:
      context: .
      dockerfile: src/Services/Sales/Sales.API/Dockerfile
    container_name: pubs-sales-api
    ports:
      - "5004:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=PubsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
      - ConnectionStrings__Redis=redis:6379
      - MessageBroker__Host=rabbitmq
      - MessageBroker__Username=guest
      - MessageBroker__Password=guest
    networks:
      - pubs-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Employees Service
  employees-api:
    build:
      context: .
      dockerfile: src/Services/Employees/Employees.API/Dockerfile
    container_name: pubs-employees-api
    ports:
      - "5005:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=PubsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
      - ConnectionStrings__Redis=redis:6379
      - MessageBroker__Host=rabbitmq
      - MessageBroker__Username=guest
      - MessageBroker__Password=guest
    networks:
      - pubs-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Stores Service
  stores-api:
    build:
      context: .
      dockerfile: src/Services/Stores/Stores.API/Dockerfile
    container_name: pubs-stores-api
    ports:
      - "5006:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=PubsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
      - ConnectionStrings__Redis=redis:6379
      - MessageBroker__Host=rabbitmq
      - MessageBroker__Username=guest
      - MessageBroker__Password=guest
    networks:
      - pubs-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Identity Service
  identity-api:
    build:
      context: .
      dockerfile: src/Services/Identity/Identity.API/Dockerfile
    container_name: pubs-identity-api
    ports:
      - "5007:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=PubsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
      - ConnectionStrings__Redis=redis:6379
      - MessageBroker__Host=rabbitmq
      - MessageBroker__Username=guest
      - MessageBroker__Password=guest
    networks:
      - pubs-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Notifications Service
  notifications-api:
    build:
      context: .
      dockerfile: src/Services/Notifications/Notifications.API/Dockerfile
    container_name: pubs-notifications-api
    ports:
      - "5008:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=PubsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
      - ConnectionStrings__Redis=redis:6379
      - MessageBroker__Host=rabbitmq
      - MessageBroker__Username=guest
      - MessageBroker__Password=guest
    networks:
      - pubs-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Analytics Service
  analytics-api:
    build:
      context: .
      dockerfile: src/Services/Analytics/Analytics.API/Dockerfile
    container_name: pubs-analytics-api
    ports:
      - "5009:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=PubsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
      - ConnectionStrings__Redis=redis:6379
      - MessageBroker__Host=rabbitmq
      - MessageBroker__Username=guest
      - MessageBroker__Password=guest
    networks:
      - pubs-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

volumes:
  sqlserver-data:
  redis-data:
  rabbitmq-data:
  prometheus-data:
  grafana-data:

networks:
  pubs-network:
    driver: bridge
