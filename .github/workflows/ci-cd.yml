name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOCKER_REGISTRY: docker.io
  IMAGE_PREFIX: pubs

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore Pubs.Microservices.sln
      
    - name: Build solution
      run: dotnet build Pubs.Microservices.sln --configuration Release --no-restore
      
    - name: Run unit tests
      run: dotnet test Pubs.Microservices.sln --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/TestResults/**/*'
        
    - name: Upload code coverage
      uses: codecov/codecov-action@v4
      if: always()
      with:
        files: '**/coverage.cobertura.xml'
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service:
          - Authors
          - Publishers
          - Titles
          - Sales
          - Employees
          - Stores
          - Identity
          - Notifications
          - Analytics
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}/${{ matrix.service }}-api
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Services/${{ matrix.service }}/${{ matrix.service }}.API/Dockerfile
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-apigateway:
    name: Build API Gateway Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}/apigateway
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/ApiGateways/ApiGateway/Dockerfile
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-docker-images, build-apigateway]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.pubs.local
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig
        export KUBECONFIG=./kubeconfig
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f deploy/k8s/namespace.yaml
        kubectl apply -f deploy/k8s/configmaps/
        kubectl apply -f deploy/k8s/secrets/
        kubectl apply -f deploy/k8s/deployments/
        kubectl rollout status deployment -n pubs-microservices

  deploy-to-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker-images, build-apigateway]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://pubs.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=./kubeconfig
        
    - name: Deploy using Helm
      run: |
        helm upgrade --install pubs-microservices ./deploy/helm/pubs-microservices \
          --namespace pubs-microservices \
          --create-namespace \
          --wait \
          --timeout 10m
